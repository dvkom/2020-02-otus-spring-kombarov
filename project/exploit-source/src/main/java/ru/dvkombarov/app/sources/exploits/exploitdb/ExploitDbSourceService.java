package ru.dvkombarov.app.sources.exploits.exploitdb;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import ru.dvkombarov.app.configuration.ExploitSourceConfig;
import ru.dvkombarov.app.constants.SourceType;
import ru.dvkombarov.app.constants.UpdateStatus;
import ru.dvkombarov.app.domain.Exploit;
import ru.dvkombarov.app.domain.UpdateInfo;
import ru.dvkombarov.app.repository.ExploitRepository;
import ru.dvkombarov.app.repository.UpdateInfoRepository;
import ru.dvkombarov.app.sources.exploits.ExploitSourceService;

import java.io.InputStream;
import java.net.URL;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;

@Service
public class ExploitDbSourceService implements ExploitSourceService {

  private static final Logger LOG = LoggerFactory.getLogger(ExploitDbSourceService.class);

  private final LastUpdateDateHtmlParser lastUpdateDateHtmlParser;

  private final ExploitsReader exploitsReader;

  private final MapToCveExtractor mapToCveExtractor;

  private final MapperToCve mapperToCve;

  private final ExploitRepository exploitRepository;

  private final UpdateInfoRepository updateInfoRepository;

  private final ExploitSourceConfig config;

  public ExploitDbSourceService(@Qualifier("exploitsDateParser") LastUpdateDateHtmlParser lastUpdateDateHtmlParser,
                                ExploitsReader exploitsReader,
                                MapToCveExtractor mapToCveExtractor, MapperToCve mapperToCve,
                                ExploitRepository exploitRepository,
                                UpdateInfoRepository updateInfoRepository,
                                ExploitSourceConfig config) {
    this.lastUpdateDateHtmlParser = lastUpdateDateHtmlParser;
    this.exploitsReader = exploitsReader;
    this.mapToCveExtractor = mapToCveExtractor;
    this.mapperToCve = mapperToCve;
    this.exploitRepository = exploitRepository;
    this.updateInfoRepository = updateInfoRepository;
    this.config = config;
  }

  @Override
  public void updateExploits() {
    if (isUpdatesAvailable()) {
      String downloadLink = config.getRawDownloadUrl() + config.getFileName();

      try (InputStream stream = new URL(downloadLink).openStream()) {
        List<Exploit> downloadedExploits = exploitsReader.readExploits(stream);
        Document docWithMapToCve = Jsoup.connect(config.getMapToCveUrl()).get();
        Map<String, List<String>> mapToCve = mapToCveExtractor.extractMapToCve(docWithMapToCve);
        List<Exploit> mappedExploits = mapperToCve.createExploits(downloadedExploits, mapToCve);

        if (!CollectionUtils.isEmpty(mappedExploits)) {
          LOG.info("Saving exploits into DB started");
          exploitRepository.saveAll(mappedExploits);
          updateInfoRepository.save(
              new UpdateInfo(SourceType.EXPLOITDB, UpdateStatus.SUCCESS, LocalDate.now())
          );
          LOG.info("Saving exploits into DB finished");
        }

        LOG.info(String.format("Update is complete. %d exploits saved", mappedExploits.size()));

      } catch (Exception e) {
        LOG.error("Error updating exploits:", e);
        updateInfoRepository.save(new UpdateInfo(
            SourceType.EXPLOITDB, UpdateStatus.ERROR,
            LocalDate.now(), ExceptionUtils.getStackTrace(e))
        );
      }
    } else {
      LOG.info("No exploit updates available");
    }
  }

  private boolean isUpdatesAvailable() {
    LocalDate lastUpdateDate = getLastUpdateDate();
    LocalDate sourceUpdateDate = lastUpdateDateHtmlParser.parseDateFromDocument();
    LOG.info("Last update date: {}; exploitsDb source update date: {}",
        lastUpdateDate, sourceUpdateDate
    );

    return sourceUpdateDate.isAfter(lastUpdateDate);
  }

  private LocalDate getLastUpdateDate() {
    return updateInfoRepository.getLastUpdateDateTime(SourceType.EXPLOITDB, UpdateStatus.SUCCESS)
        .orElse(LocalDate.now().minusMonths(1L));
  }
}

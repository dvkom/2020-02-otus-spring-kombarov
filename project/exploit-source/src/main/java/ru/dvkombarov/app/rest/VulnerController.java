package ru.dvkombarov.app.rest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import ru.dvkombarov.app.dao.service.VulnerService;
import ru.dvkombarov.app.rest.dto.VulnerDto;
import ru.dvkombarov.app.utils.DtoConvertUtils;

import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;

@RestController
public class VulnerController {

  private static final Logger LOG = LoggerFactory.getLogger(VulnerController.class);
  private static final String INTERNAL_ERROR_MESSAGE = "An error occurred while processing " +
      "the request on the server";

  private final VulnerService vulnerService;

  public VulnerController(VulnerService vulnerService) {
    this.vulnerService = vulnerService;
  }

  @GetMapping("/api/vulners/{cveList}")
  public Set<VulnerDto> getVulnersByCveList(@PathVariable List<String> cveList) {
    LOG.info("Call method getVulnersByCveList, cveList = {}", cveList);

    return vulnerService.getVulnersWithExploitsByCveList(cveList)
        .stream()
        .map(DtoConvertUtils::toVulnerDto)
        .collect(Collectors.toSet());
  }

  @ExceptionHandler(Exception.class)
  public ResponseEntity<String> handleAnotherException(Exception e) {
    LOG.error(INTERNAL_ERROR_MESSAGE, e);

    return ResponseEntity.status(INTERNAL_SERVER_ERROR)
        .contentType(MediaType.APPLICATION_JSON)
        .body(INTERNAL_ERROR_MESSAGE);
  }
}

package ru.dvkombarov.app.domain;


import javax.persistence.*;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

/**
 * Exploit entity class
 *
 * @author Denis Kombarov
 */

@Entity
@Table(
    name = "exploit"
)
public class Exploit {

  @EmbeddedId
  private ExploitId id;

  /**
   * the exploit description
   */
  private String description;
  /**
   * the exploit download link
   */
  private String link;

  @ManyToMany(
      fetch = FetchType.LAZY,
      cascade = {CascadeType.PERSIST, CascadeType.MERGE}
  )
  @JoinTable(
      name = "exploit_vulnerability",
      joinColumns = {
          @JoinColumn(name = "sourceId"), @JoinColumn(name = "sourceTypeId")
      },
      inverseJoinColumns = @JoinColumn(name = "vulnerability_id")
  )
  private Set<Vulnerability> vulnerabilities = new HashSet<>();

  public Exploit() {
  }

  /**
   * Create a new exploit.
   *
   * @param description the exploit description
   * @param link        the exploit download link
   */
  public Exploit(ExploitId id, String description, String link) {
    this.id = id;
    this.description = description;
    this.link = link;
  }

  public Exploit(Exploit exploit) {
    this.id = new ExploitId(
        exploit.getId().getSourceId(),
        exploit.getId().getSourceTypeId()
    );
    this.description = exploit.getDescription();
    this.link = exploit.getLink();
    this.vulnerabilities = new HashSet<>(exploit.getVulnerabilities());
  }

  public ExploitId getId() {
    return id;
  }

  public void setId(ExploitId id) {
    this.id = id;
  }

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }

  public Set<Vulnerability> getVulnerabilities() {
    return vulnerabilities;
  }

  public void setVulnerabilities(Set<Vulnerability> vulnerabilities) {
    this.vulnerabilities = vulnerabilities;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    Exploit exploit = (Exploit) o;
    return id.equals(exploit.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id);
  }

  @Override
  public String toString() {
    return "Exploit{" +
        "exploitId=" + id +
        ", description='" + description + '\'' +
        ", link='" + link + '\'' +
        '}';
  }
}

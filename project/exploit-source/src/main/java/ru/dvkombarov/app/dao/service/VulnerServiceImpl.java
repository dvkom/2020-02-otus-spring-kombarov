package ru.dvkombarov.app.dao.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;
import ru.dvkombarov.app.dao.repository.VulnerabilityJdbcRepository;
import ru.dvkombarov.app.dao.repository.VulnerabilityRepository;
import ru.dvkombarov.app.domain.Vulnerability;

import java.util.ArrayList;
import java.util.List;

@Service
public class VulnerServiceImpl implements VulnerService {

  private static final Logger LOG = LoggerFactory.getLogger(VulnerServiceImpl.class);

  private final VulnerabilityRepository vulnerabilityRepository;
  private final VulnerabilityJdbcRepository vulnerabilityJdbcRepository;

  public VulnerServiceImpl(VulnerabilityRepository vulnerabilityRepository,
                           VulnerabilityJdbcRepository vulnerabilityJdbcRepository) {
    this.vulnerabilityRepository = vulnerabilityRepository;
    this.vulnerabilityJdbcRepository = vulnerabilityJdbcRepository;
  }

  @Override
  @Transactional
  public List<Vulnerability> getVulnersWithExploitsByCveList(List<String> cveList) {
    LOG.info("Call getVulnersWithExploitsByCveList, cveList = {}", cveList);

    return CollectionUtils.isEmpty(cveList) ?
        new ArrayList<>() :
        vulnerabilityRepository.findAllByCveWithExploits(cveList);
  }

  @Override
  @Transactional
  public Vulnerability getVulnerByCve(String cve) {
    LOG.debug("Call getVulnerByCve, cve = {}", cve);

    return vulnerabilityRepository.findVulnerabilityByCve(cve)
        .orElse(new Vulnerability(cve, ""));
  }

  @Override
  @Transactional
  public void saveAll(List<Vulnerability> vulnerabilities) {
    LOG.info("Call saveAll, vulnerabilities count = {}",
        vulnerabilities == null ? 0 : vulnerabilities.size());

    vulnerabilityJdbcRepository.saveAll(vulnerabilities);
  }
}

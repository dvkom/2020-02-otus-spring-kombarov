package ru.dvkombarov.app.sources.exploits.exploitdb;

import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import ru.dvkombarov.app.configuration.ExploitSourceConfig;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@Component
public class MapToCveExtractorImpl implements MapToCveExtractor {

  private static final Logger LOG = LoggerFactory.getLogger(MapToCveExtractorImpl.class);

  private final ExploitSourceConfig config;

  public MapToCveExtractorImpl(ExploitSourceConfig config) {
    this.config = config;
  }

  @Override
  public Map<String, List<String>> extractMapToCve(Document doc) {
    LOG.info("Map to CVE extracting started");

    return Optional.ofNullable(doc)
        .map(document -> document.select("table"))
        .stream()
        .flatMap(Collection::stream)
        .filter(element -> element.selectFirst(config.getHrefMask()) != null)
        .findFirst()
        .map(this::extractMapFromTable)
        .orElse(null);
  }

  private Map<String, List<String>> extractMapFromTable(Element table) {
    Map<String, List<String>> mapToCve = table
        .select("tr")
        .stream()
        .collect(Collectors.toMap(
            this::extractExploitNumber,
            this::extractCveNumbers
            )
        );
    LOG.info("Map to CVE extracting finished");

    return mapToCve;
  }

  private String extractExploitNumber(Element td) {
    return td
        .selectFirst("td")
        .ownText()
        .replaceAll("[^\\d]", "");
  }

  private List<String> extractCveNumbers(Element td) {
    return td
        .select("td a")
        .stream()
        .map(Element::ownText)
        .collect(Collectors.toList());
  }
}

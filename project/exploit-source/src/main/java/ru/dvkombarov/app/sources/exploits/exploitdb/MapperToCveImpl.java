package ru.dvkombarov.app.sources.exploits.exploitdb;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import ru.dvkombarov.app.dao.service.VulnerService;
import ru.dvkombarov.app.domain.Exploit;
import ru.dvkombarov.app.domain.ExploitId;
import ru.dvkombarov.app.domain.Vulnerability;

import java.util.*;
import java.util.stream.Collectors;

@Component
public class MapperToCveImpl implements MapperToCve {

  private static final Logger LOG = LoggerFactory.getLogger(MapperToCveImpl.class);

  private final VulnerService vulnerService;

  public MapperToCveImpl(VulnerService vulnerService) {
    this.vulnerService = vulnerService;
  }

  @Override
  public List<Exploit> createExploits(List<Exploit> exploits,
                                      Map<String, List<String>> mapToCve) {
    LOG.info("Mapping to CVE started");
    List<Exploit> mappedExploits = new ArrayList<>();

    exploits.forEach(exploit -> Optional.ofNullable(exploit.getId())
        .map(ExploitId::getSourceId)
        .map(mapToCve::get)
        .map(this::getVulnerabilitiesByCves)
        .ifPresent(vulnerabilities -> {
          Exploit mappedExploit = new Exploit(exploit);
          mappedExploit.setVulnerabilities(vulnerabilities);
          mappedExploits.add(mappedExploit);
        }));

    LOG.info("Mapping to CVE finished, {} exploits created", mappedExploits.size());

    return mappedExploits;
  }

  private Set<Vulnerability> getVulnerabilitiesByCves(List<String> cveNumbers) {
    return cveNumbers.stream()
        .map(vulnerService::getVulnerByCve)
        .collect(Collectors.toSet());
  }
}

package ru.dvkombarov.app.sources.vulners;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import ru.dvkombarov.app.configuration.CommonConfig;
import ru.dvkombarov.app.configuration.VunlersSourceConfig;
import ru.dvkombarov.app.domain.Vulnerability;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

@Component
public class VulnersReaderImpl implements VulnersReader {

  private static final Logger LOG = LoggerFactory.getLogger(VulnersReaderImpl.class);

  private final VunlersSourceConfig vunlersSourceConfig;

  private final CommonConfig commonConfig;

  public VulnersReaderImpl(VunlersSourceConfig vunlersSourceConfig,
                           CommonConfig commonConfig) {
    this.vunlersSourceConfig = vunlersSourceConfig;
    this.commonConfig = commonConfig;
  }

  @Override
  public List<Vulnerability> readVulners() throws IOException {
    LOG.debug("Call method VulnersReaderImpl::readVulners");

    try (BufferedReader reader = new BufferedReader(new InputStreamReader(
        new URL(vunlersSourceConfig.getCveDownloadUrl()).openStream(), StandardCharsets.UTF_8))) {

      skipLines(reader);

      return readFromCve(reader);
    }
  }

  private void skipLines(BufferedReader reader) throws IOException {
    for (int i = 0; i < vunlersSourceConfig.getLinesToSkip(); i++) {
      reader.readLine();
    }
  }

  private List<Vulnerability> readFromCve(BufferedReader reader) throws IOException {
    List<Vulnerability> readVulners = new ArrayList<>();
    LOG.info("Vulners reading started");

    String line;
    while ((line = reader.readLine()) != null) {
      String[] values = line.split(commonConfig.getCommaDelimiter());
      if (values.length > 2) {
        readVulners.add(new Vulnerability(
            values[0],
            values[2]
        ));
      }
    }
    LOG.info("Vulners reading finished");

    return readVulners;
  }
}
